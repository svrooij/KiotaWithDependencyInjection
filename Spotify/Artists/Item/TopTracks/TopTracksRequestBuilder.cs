// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Spotify.Models;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Spotify.Artists.Item.TopTracks {
    /// <summary>
    /// Builds and executes requests for operations under \artists\{id}\top-tracks
    /// </summary>
    public class TopTracksRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>
        /// Instantiates a new <see cref="TopTracksRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TopTracksRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/artists/{id}/top-tracks{?market*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="TopTracksRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TopTracksRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/artists/{id}/top-tracks{?market*}", rawUrl)
        {
        }
        /// <summary>
        /// Get Spotify catalog information about an artist&apos;s top tracks by country.
        /// </summary>
        /// <returns>A <see cref="TopTracksGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="TopTracks401Error">When receiving a 401 status code</exception>
        /// <exception cref="TopTracks403Error">When receiving a 403 status code</exception>
        /// <exception cref="TopTracks429Error">When receiving a 429 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<TopTracksGetResponse?> GetAsTopTracksGetResponseAsync(Action<RequestConfiguration<TopTracksRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<TopTracksGetResponse> GetAsTopTracksGetResponseAsync(Action<RequestConfiguration<TopTracksRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"401", TopTracks401Error.CreateFromDiscriminatorValue},
                {"403", TopTracks403Error.CreateFromDiscriminatorValue},
                {"429", TopTracks429Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<TopTracksGetResponse>(requestInfo, TopTracksGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get Spotify catalog information about an artist&apos;s top tracks by country.
        /// </summary>
        /// <returns>A <see cref="TopTracksResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="TopTracks401Error">When receiving a 401 status code</exception>
        /// <exception cref="TopTracks403Error">When receiving a 403 status code</exception>
        /// <exception cref="TopTracks429Error">When receiving a 429 status code</exception>
        [Obsolete("This method is obsolete. Use GetAsTopTracksGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<TopTracksResponse?> GetAsync(Action<RequestConfiguration<TopTracksRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<TopTracksResponse> GetAsync(Action<RequestConfiguration<TopTracksRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"401", TopTracks401Error.CreateFromDiscriminatorValue},
                {"403", TopTracks403Error.CreateFromDiscriminatorValue},
                {"429", TopTracks429Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<TopTracksResponse>(requestInfo, TopTracksResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get Spotify catalog information about an artist&apos;s top tracks by country.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<TopTracksRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<TopTracksRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="TopTracksRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public TopTracksRequestBuilder WithUrl(string rawUrl)
        {
            return new TopTracksRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get Spotify catalog information about an artist&apos;s top tracks by country.
        /// </summary>
        public class TopTracksRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("market")]
            public string? Market { get; set; }
#nullable restore
#else
            [QueryParameter("market")]
            public string Market { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class TopTracksRequestBuilderGetRequestConfiguration : RequestConfiguration<TopTracksRequestBuilderGetQueryParameters> 
        {
        }
    }
}
