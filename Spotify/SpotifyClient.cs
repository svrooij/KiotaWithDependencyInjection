// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Json;
using Spotify.Albums;
using Spotify.Artists;
using Spotify.AudioAnalysis;
using Spotify.AudioFeatures;
using Spotify.Audiobooks;
using Spotify.Browse;
using Spotify.Chapters;
using Spotify.Episodes;
using Spotify.Markets;
using Spotify.Me;
using Spotify.Playlists;
using Spotify.Recommendations;
using Spotify.Search;
using Spotify.Shows;
using Spotify.Tracks;
using Spotify.Users;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System;
namespace Spotify {
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    public class SpotifyClient : BaseRequestBuilder 
    {
        /// <summary>The albums property</summary>
        public AlbumsRequestBuilder Albums
        {
            get => new AlbumsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The artists property</summary>
        public ArtistsRequestBuilder Artists
        {
            get => new ArtistsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The audioAnalysis property</summary>
        public AudioAnalysisRequestBuilder AudioAnalysis
        {
            get => new AudioAnalysisRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The audiobooks property</summary>
        public AudiobooksRequestBuilder Audiobooks
        {
            get => new AudiobooksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The audioFeatures property</summary>
        public AudioFeaturesRequestBuilder AudioFeatures
        {
            get => new AudioFeaturesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The browse property</summary>
        public BrowseRequestBuilder Browse
        {
            get => new BrowseRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The chapters property</summary>
        public ChaptersRequestBuilder Chapters
        {
            get => new ChaptersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The episodes property</summary>
        public EpisodesRequestBuilder Episodes
        {
            get => new EpisodesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The markets property</summary>
        public MarketsRequestBuilder Markets
        {
            get => new MarketsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The me property</summary>
        public MeRequestBuilder Me
        {
            get => new MeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The playlists property</summary>
        public PlaylistsRequestBuilder Playlists
        {
            get => new PlaylistsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The recommendations property</summary>
        public RecommendationsRequestBuilder Recommendations
        {
            get => new RecommendationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The search property</summary>
        public SearchRequestBuilder Search
        {
            get => new SearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The shows property</summary>
        public ShowsRequestBuilder Shows
        {
            get => new ShowsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tracks property</summary>
        public TracksRequestBuilder Tracks
        {
            get => new TracksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The users property</summary>
        public UsersRequestBuilder Users
        {
            get => new UsersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="SpotifyClient"/> and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SpotifyClient(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>())
        {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl))
            {
                RequestAdapter.BaseUrl = "https://api.spotify.com/v1";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
    }
}
