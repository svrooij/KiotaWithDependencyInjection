// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Spotify.Models {
    public class DisallowsObject : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Interrupting playback. Optional field.</summary>
        public bool? InterruptingPlayback { get; set; }
        /// <summary>Pausing. Optional field.</summary>
        public bool? Pausing { get; set; }
        /// <summary>Resuming. Optional field.</summary>
        public bool? Resuming { get; set; }
        /// <summary>Seeking playback location. Optional field.</summary>
        public bool? Seeking { get; set; }
        /// <summary>Skipping to the next context. Optional field.</summary>
        public bool? SkippingNext { get; set; }
        /// <summary>Skipping to the previous context. Optional field.</summary>
        public bool? SkippingPrev { get; set; }
        /// <summary>Toggling repeat context flag. Optional field.</summary>
        public bool? TogglingRepeatContext { get; set; }
        /// <summary>Toggling repeat track flag. Optional field.</summary>
        public bool? TogglingRepeatTrack { get; set; }
        /// <summary>Toggling shuffle flag. Optional field.</summary>
        public bool? TogglingShuffle { get; set; }
        /// <summary>Transfering playback between devices. Optional field.</summary>
        public bool? TransferringPlayback { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="DisallowsObject"/> and sets the default values.
        /// </summary>
        public DisallowsObject()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="DisallowsObject"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static DisallowsObject CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new DisallowsObject();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"interrupting_playback", n => { InterruptingPlayback = n.GetBoolValue(); } },
                {"pausing", n => { Pausing = n.GetBoolValue(); } },
                {"resuming", n => { Resuming = n.GetBoolValue(); } },
                {"seeking", n => { Seeking = n.GetBoolValue(); } },
                {"skipping_next", n => { SkippingNext = n.GetBoolValue(); } },
                {"skipping_prev", n => { SkippingPrev = n.GetBoolValue(); } },
                {"toggling_repeat_context", n => { TogglingRepeatContext = n.GetBoolValue(); } },
                {"toggling_repeat_track", n => { TogglingRepeatTrack = n.GetBoolValue(); } },
                {"toggling_shuffle", n => { TogglingShuffle = n.GetBoolValue(); } },
                {"transferring_playback", n => { TransferringPlayback = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("interrupting_playback", InterruptingPlayback);
            writer.WriteBoolValue("pausing", Pausing);
            writer.WriteBoolValue("resuming", Resuming);
            writer.WriteBoolValue("seeking", Seeking);
            writer.WriteBoolValue("skipping_next", SkippingNext);
            writer.WriteBoolValue("skipping_prev", SkippingPrev);
            writer.WriteBoolValue("toggling_repeat_context", TogglingRepeatContext);
            writer.WriteBoolValue("toggling_repeat_track", TogglingRepeatTrack);
            writer.WriteBoolValue("toggling_shuffle", TogglingShuffle);
            writer.WriteBoolValue("transferring_playback", TransferringPlayback);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
