// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Spotify.Models {
    public class PagingObject : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A link to the Web API endpoint returning the full result of the request</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Href { get; set; }
#nullable restore
#else
        public string Href { get; set; }
#endif
        /// <summary>The maximum number of items in the response (as set in the query or by default).</summary>
        public int? Limit { get; set; }
        /// <summary>URL to the next page of items. ( `null` if none)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Next { get; set; }
#nullable restore
#else
        public string Next { get; set; }
#endif
        /// <summary>The offset of the items returned (as set in the query or by default)</summary>
        public int? Offset { get; set; }
        /// <summary>URL to the previous page of items. ( `null` if none)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Previous { get; set; }
#nullable restore
#else
        public string Previous { get; set; }
#endif
        /// <summary>The total number of items available to return.</summary>
        public int? Total { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="PagingObject"/> and sets the default values.
        /// </summary>
        public PagingObject()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PagingObject"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PagingObject CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PagingObject();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"href", n => { Href = n.GetStringValue(); } },
                {"limit", n => { Limit = n.GetIntValue(); } },
                {"next", n => { Next = n.GetStringValue(); } },
                {"offset", n => { Offset = n.GetIntValue(); } },
                {"previous", n => { Previous = n.GetStringValue(); } },
                {"total", n => { Total = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("href", Href);
            writer.WriteIntValue("limit", Limit);
            writer.WriteStringValue("next", Next);
            writer.WriteIntValue("offset", Offset);
            writer.WriteStringValue("previous", Previous);
            writer.WriteIntValue("total", Total);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
