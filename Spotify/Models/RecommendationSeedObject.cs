// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Spotify.Models {
    public class RecommendationSeedObject : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The number of tracks available after min\_\* and max\_\* filters have been applied.</summary>
        public int? AfterFilteringSize { get; set; }
        /// <summary>The number of tracks available after relinking for regional availability.</summary>
        public int? AfterRelinkingSize { get; set; }
        /// <summary>A link to the full track or artist data for this seed. For tracks this will be a link to a Track Object. For artists a link to an Artist Object. For genre seeds, this value will be `null`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Href { get; set; }
#nullable restore
#else
        public string Href { get; set; }
#endif
        /// <summary>The id used to select this seed. This will be the same as the string used in the `seed_artists`, `seed_tracks` or `seed_genres` parameter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The number of recommended tracks available for this seed.</summary>
        public int? InitialPoolSize { get; set; }
        /// <summary>The entity type of this seed. One of `artist`, `track` or `genre`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="RecommendationSeedObject"/> and sets the default values.
        /// </summary>
        public RecommendationSeedObject()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="RecommendationSeedObject"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static RecommendationSeedObject CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new RecommendationSeedObject();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"afterFilteringSize", n => { AfterFilteringSize = n.GetIntValue(); } },
                {"afterRelinkingSize", n => { AfterRelinkingSize = n.GetIntValue(); } },
                {"href", n => { Href = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"initialPoolSize", n => { InitialPoolSize = n.GetIntValue(); } },
                {"type", n => { Type = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("afterFilteringSize", AfterFilteringSize);
            writer.WriteIntValue("afterRelinkingSize", AfterRelinkingSize);
            writer.WriteStringValue("href", Href);
            writer.WriteStringValue("id", Id);
            writer.WriteIntValue("initialPoolSize", InitialPoolSize);
            writer.WriteStringValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
