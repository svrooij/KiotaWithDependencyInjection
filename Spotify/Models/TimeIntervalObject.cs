// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Spotify.Models {
    public class TimeIntervalObject : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The confidence, from 0.0 to 1.0, of the reliability of the interval.</summary>
        public double? Confidence { get; set; }
        /// <summary>The duration (in seconds) of the time interval.</summary>
        public double? Duration { get; set; }
        /// <summary>The starting point (in seconds) of the time interval.</summary>
        public double? Start { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="TimeIntervalObject"/> and sets the default values.
        /// </summary>
        public TimeIntervalObject()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="TimeIntervalObject"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static TimeIntervalObject CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new TimeIntervalObject();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"confidence", n => { Confidence = n.GetDoubleValue(); } },
                {"duration", n => { Duration = n.GetDoubleValue(); } },
                {"start", n => { Start = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("confidence", Confidence);
            writer.WriteDoubleValue("duration", Duration);
            writer.WriteDoubleValue("start", Start);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
