// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Spotify.Models {
    public class TrackObject : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The album on which the track appears. The album object includes a link in `href` to full information about the album.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Tracks? Album { get; set; }
#nullable restore
#else
        public Tracks Album { get; set; }
#endif
        /// <summary>The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ArtistObject>? Artists { get; set; }
#nullable restore
#else
        public List<ArtistObject> Artists { get; set; }
#endif
        /// <summary>A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AvailableMarkets { get; set; }
#nullable restore
#else
        public List<string> AvailableMarkets { get; set; }
#endif
        /// <summary>The disc number (usually `1` unless the album consists of more than one disc).</summary>
        public int? DiscNumber { get; set; }
        /// <summary>The track length in milliseconds.</summary>
        public int? DurationMs { get; set; }
        /// <summary>Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).</summary>
        public bool? Explicit { get; set; }
        /// <summary>Known external IDs for the track.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ExternalIdObject? ExternalIds { get; set; }
#nullable restore
#else
        public ExternalIdObject ExternalIds { get; set; }
#endif
        /// <summary>Known external URLs for this track.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ExternalUrlObject? ExternalUrls { get; set; }
#nullable restore
#else
        public ExternalUrlObject ExternalUrls { get; set; }
#endif
        /// <summary>A link to the Web API endpoint providing full details of the track.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Href { get; set; }
#nullable restore
#else
        public string Href { get; set; }
#endif
        /// <summary>The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) for the track.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Whether or not the track is from a local file.</summary>
        public bool? IsLocal { get; set; }
        /// <summary>Part of the response when [Track Relinking](/documentation/general/guides/track-relinking-guide/) is applied. If `true`, the track is playable in the given market. Otherwise `false`.</summary>
        public bool? IsPlayable { get; set; }
        /// <summary>Part of the response when [Track Relinking](/documentation/general/guides/track-relinking-guide/) is applied, and the requested track has been replaced with different track. The track in the `linked_from` object contains information about the originally requested track.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public TrackObject_linked_from? LinkedFrom { get; set; }
#nullable restore
#else
        public TrackObject_linked_from LinkedFrom { get; set; }
#endif
        /// <summary>The name of the track.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.&lt;br/&gt;The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.&lt;br/&gt;Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._</summary>
        public int? Popularity { get; set; }
        /// <summary>A link to a 30 second preview (MP3 format) of the track. Can be `null`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviewUrl { get; set; }
#nullable restore
#else
        public string PreviewUrl { get; set; }
#endif
        /// <summary>Included in the response when a content restriction is applied.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public TrackRestrictionObject? Restrictions { get; set; }
#nullable restore
#else
        public TrackRestrictionObject Restrictions { get; set; }
#endif
        /// <summary>The number of the track. If an album has several discs, the track number is the number on the specified disc.</summary>
        public int? TrackNumber { get; set; }
        /// <summary>The object type: &quot;track&quot;.</summary>
        public TrackObject_type? Type { get; set; }
        /// <summary>The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the track.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Uri { get; set; }
#nullable restore
#else
        public string Uri { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="TrackObject"/> and sets the default values.
        /// </summary>
        public TrackObject()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="TrackObject"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static TrackObject CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new TrackObject();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"album", n => { Album = n.GetObjectValue<Tracks>(Tracks.CreateFromDiscriminatorValue); } },
                {"artists", n => { Artists = n.GetCollectionOfObjectValues<ArtistObject>(ArtistObject.CreateFromDiscriminatorValue)?.ToList(); } },
                {"available_markets", n => { AvailableMarkets = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"disc_number", n => { DiscNumber = n.GetIntValue(); } },
                {"duration_ms", n => { DurationMs = n.GetIntValue(); } },
                {"explicit", n => { Explicit = n.GetBoolValue(); } },
                {"external_ids", n => { ExternalIds = n.GetObjectValue<ExternalIdObject>(ExternalIdObject.CreateFromDiscriminatorValue); } },
                {"external_urls", n => { ExternalUrls = n.GetObjectValue<ExternalUrlObject>(ExternalUrlObject.CreateFromDiscriminatorValue); } },
                {"href", n => { Href = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"is_local", n => { IsLocal = n.GetBoolValue(); } },
                {"is_playable", n => { IsPlayable = n.GetBoolValue(); } },
                {"linked_from", n => { LinkedFrom = n.GetObjectValue<TrackObject_linked_from>(TrackObject_linked_from.CreateFromDiscriminatorValue); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"popularity", n => { Popularity = n.GetIntValue(); } },
                {"preview_url", n => { PreviewUrl = n.GetStringValue(); } },
                {"restrictions", n => { Restrictions = n.GetObjectValue<TrackRestrictionObject>(TrackRestrictionObject.CreateFromDiscriminatorValue); } },
                {"track_number", n => { TrackNumber = n.GetIntValue(); } },
                {"type", n => { Type = n.GetEnumValue<TrackObject_type>(); } },
                {"uri", n => { Uri = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<Tracks>("album", Album);
            writer.WriteCollectionOfObjectValues<ArtistObject>("artists", Artists);
            writer.WriteCollectionOfPrimitiveValues<string>("available_markets", AvailableMarkets);
            writer.WriteIntValue("disc_number", DiscNumber);
            writer.WriteIntValue("duration_ms", DurationMs);
            writer.WriteBoolValue("explicit", Explicit);
            writer.WriteObjectValue<ExternalIdObject>("external_ids", ExternalIds);
            writer.WriteObjectValue<ExternalUrlObject>("external_urls", ExternalUrls);
            writer.WriteStringValue("href", Href);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("is_local", IsLocal);
            writer.WriteBoolValue("is_playable", IsPlayable);
            writer.WriteObjectValue<TrackObject_linked_from>("linked_from", LinkedFrom);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("popularity", Popularity);
            writer.WriteStringValue("preview_url", PreviewUrl);
            writer.WriteObjectValue<TrackRestrictionObject>("restrictions", Restrictions);
            writer.WriteIntValue("track_number", TrackNumber);
            writer.WriteEnumValue<TrackObject_type>("type", Type);
            writer.WriteStringValue("uri", Uri);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
