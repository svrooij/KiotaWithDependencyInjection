// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Spotify.Models {
    public class SimplifiedTrackObject : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<SimplifiedArtistObject>? Artists { get; set; }
#nullable restore
#else
        public List<SimplifiedArtistObject> Artists { get; set; }
#endif
        /// <summary>A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AvailableMarkets { get; set; }
#nullable restore
#else
        public List<string> AvailableMarkets { get; set; }
#endif
        /// <summary>The disc number (usually `1` unless the album consists of more than one disc).</summary>
        public int? DiscNumber { get; set; }
        /// <summary>The track length in milliseconds.</summary>
        public int? DurationMs { get; set; }
        /// <summary>Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).</summary>
        public bool? Explicit { get; set; }
        /// <summary>External URLs for this track.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ExternalUrlObject? ExternalUrls { get; set; }
#nullable restore
#else
        public ExternalUrlObject ExternalUrls { get; set; }
#endif
        /// <summary>A link to the Web API endpoint providing full details of the track.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Href { get; set; }
#nullable restore
#else
        public string Href { get; set; }
#endif
        /// <summary>The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) for the track.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Whether or not the track is from a local file.</summary>
        public bool? IsLocal { get; set; }
        /// <summary>Part of the response when [Track Relinking](/documentation/general/guides/track-relinking-guide/) is applied. If `true`, the track is playable in the given market. Otherwise `false`.</summary>
        public bool? IsPlayable { get; set; }
        /// <summary>Part of the response when [Track Relinking](/documentation/general/guides/track-relinking-guide/) is applied and is only part of the response if the track linking, in fact, exists. The requested track has been replaced with a different track. The track in the `linked_from` object contains information about the originally requested track.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public LinkedTrackObject? LinkedFrom { get; set; }
#nullable restore
#else
        public LinkedTrackObject LinkedFrom { get; set; }
#endif
        /// <summary>The name of the track.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>A URL to a 30 second preview (MP3 format) of the track.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviewUrl { get; set; }
#nullable restore
#else
        public string PreviewUrl { get; set; }
#endif
        /// <summary>Included in the response when a content restriction is applied.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public TrackRestrictionObject? Restrictions { get; set; }
#nullable restore
#else
        public TrackRestrictionObject Restrictions { get; set; }
#endif
        /// <summary>The number of the track. If an album has several discs, the track number is the number on the specified disc.</summary>
        public int? TrackNumber { get; set; }
        /// <summary>The object type: &quot;track&quot;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the track.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Uri { get; set; }
#nullable restore
#else
        public string Uri { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="SimplifiedTrackObject"/> and sets the default values.
        /// </summary>
        public SimplifiedTrackObject()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="SimplifiedTrackObject"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SimplifiedTrackObject CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SimplifiedTrackObject();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"artists", n => { Artists = n.GetCollectionOfObjectValues<SimplifiedArtistObject>(SimplifiedArtistObject.CreateFromDiscriminatorValue)?.ToList(); } },
                {"available_markets", n => { AvailableMarkets = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"disc_number", n => { DiscNumber = n.GetIntValue(); } },
                {"duration_ms", n => { DurationMs = n.GetIntValue(); } },
                {"explicit", n => { Explicit = n.GetBoolValue(); } },
                {"external_urls", n => { ExternalUrls = n.GetObjectValue<ExternalUrlObject>(ExternalUrlObject.CreateFromDiscriminatorValue); } },
                {"href", n => { Href = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"is_local", n => { IsLocal = n.GetBoolValue(); } },
                {"is_playable", n => { IsPlayable = n.GetBoolValue(); } },
                {"linked_from", n => { LinkedFrom = n.GetObjectValue<LinkedTrackObject>(LinkedTrackObject.CreateFromDiscriminatorValue); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"preview_url", n => { PreviewUrl = n.GetStringValue(); } },
                {"restrictions", n => { Restrictions = n.GetObjectValue<TrackRestrictionObject>(TrackRestrictionObject.CreateFromDiscriminatorValue); } },
                {"track_number", n => { TrackNumber = n.GetIntValue(); } },
                {"type", n => { Type = n.GetStringValue(); } },
                {"uri", n => { Uri = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<SimplifiedArtistObject>("artists", Artists);
            writer.WriteCollectionOfPrimitiveValues<string>("available_markets", AvailableMarkets);
            writer.WriteIntValue("disc_number", DiscNumber);
            writer.WriteIntValue("duration_ms", DurationMs);
            writer.WriteBoolValue("explicit", Explicit);
            writer.WriteObjectValue<ExternalUrlObject>("external_urls", ExternalUrls);
            writer.WriteStringValue("href", Href);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("is_local", IsLocal);
            writer.WriteBoolValue("is_playable", IsPlayable);
            writer.WriteObjectValue<LinkedTrackObject>("linked_from", LinkedFrom);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("preview_url", PreviewUrl);
            writer.WriteObjectValue<TrackRestrictionObject>("restrictions", Restrictions);
            writer.WriteIntValue("track_number", TrackNumber);
            writer.WriteStringValue("type", Type);
            writer.WriteStringValue("uri", Uri);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
