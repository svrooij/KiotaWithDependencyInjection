// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Spotify.Models {
    public class QueueObject : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The currently playing track or episode. Can be `null`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public QueueObject_currently_playing? CurrentlyPlaying { get; set; }
#nullable restore
#else
        public QueueObject_currently_playing CurrentlyPlaying { get; set; }
#endif
        /// <summary>The tracks or episodes in the queue. Can be empty.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<QueueObject_queue>? Queue { get; set; }
#nullable restore
#else
        public List<QueueObject_queue> Queue { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="QueueObject"/> and sets the default values.
        /// </summary>
        public QueueObject()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="QueueObject"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static QueueObject CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new QueueObject();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"currently_playing", n => { CurrentlyPlaying = n.GetObjectValue<QueueObject_currently_playing>(QueueObject_currently_playing.CreateFromDiscriminatorValue); } },
                {"queue", n => { Queue = n.GetCollectionOfObjectValues<QueueObject_queue>(QueueObject_queue.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<QueueObject_currently_playing>("currently_playing", CurrentlyPlaying);
            writer.WriteCollectionOfObjectValues<QueueObject_queue>("queue", Queue);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="EpisodeObject"/>, <see cref="TrackObject"/>
        /// </summary>
        public class QueueObject_currently_playing : IComposedTypeWrapper, IParsable 
        {
            /// <summary>Composed type representation for type <see cref="Spotify.Models.EpisodeObject"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public Spotify.Models.EpisodeObject? EpisodeObject { get; set; }
#nullable restore
#else
            public Spotify.Models.EpisodeObject EpisodeObject { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="Spotify.Models.TrackObject"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public Spotify.Models.TrackObject? TrackObject { get; set; }
#nullable restore
#else
            public Spotify.Models.TrackObject TrackObject { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="QueueObject_currently_playing"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static QueueObject_currently_playing CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("type")?.GetStringValue();
                var result = new QueueObject_currently_playing();
                if("EpisodeObject".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.EpisodeObject = new Spotify.Models.EpisodeObject();
                }
                else if("TrackObject".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.TrackObject = new Spotify.Models.TrackObject();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(EpisodeObject != null)
                {
                    return EpisodeObject.GetFieldDeserializers();
                }
                else if(TrackObject != null)
                {
                    return TrackObject.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(EpisodeObject != null)
                {
                    writer.WriteObjectValue<Spotify.Models.EpisodeObject>(null, EpisodeObject);
                }
                else if(TrackObject != null)
                {
                    writer.WriteObjectValue<Spotify.Models.TrackObject>(null, TrackObject);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="EpisodeObject"/>, <see cref="TrackObject"/>
        /// </summary>
        public class QueueObject_queue : IComposedTypeWrapper, IParsable 
        {
            /// <summary>Composed type representation for type <see cref="Spotify.Models.EpisodeObject"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public Spotify.Models.EpisodeObject? EpisodeObject { get; set; }
#nullable restore
#else
            public Spotify.Models.EpisodeObject EpisodeObject { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="Spotify.Models.TrackObject"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public Spotify.Models.TrackObject? TrackObject { get; set; }
#nullable restore
#else
            public Spotify.Models.TrackObject TrackObject { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="QueueObject_queue"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static QueueObject_queue CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("type")?.GetStringValue();
                var result = new QueueObject_queue();
                if("EpisodeObject".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.EpisodeObject = new Spotify.Models.EpisodeObject();
                }
                else if("TrackObject".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.TrackObject = new Spotify.Models.TrackObject();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(EpisodeObject != null)
                {
                    return EpisodeObject.GetFieldDeserializers();
                }
                else if(TrackObject != null)
                {
                    return TrackObject.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(EpisodeObject != null)
                {
                    writer.WriteObjectValue<Spotify.Models.EpisodeObject>(null, EpisodeObject);
                }
                else if(TrackObject != null)
                {
                    writer.WriteObjectValue<Spotify.Models.TrackObject>(null, TrackObject);
                }
            }
        }
    }
}
