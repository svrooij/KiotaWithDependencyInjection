// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Spotify.Models {
    public class AlbumBase : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The type of the album.</summary>
        public AlbumBase_album_type? AlbumType { get; set; }
        /// <summary>The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AvailableMarkets { get; set; }
#nullable restore
#else
        public List<string> AvailableMarkets { get; set; }
#endif
        /// <summary>The copyright statements of the album.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<CopyrightObject>? Copyrights { get; set; }
#nullable restore
#else
        public List<CopyrightObject> Copyrights { get; set; }
#endif
        /// <summary>Known external IDs for the album.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ExternalIdObject? ExternalIds { get; set; }
#nullable restore
#else
        public ExternalIdObject ExternalIds { get; set; }
#endif
        /// <summary>Known external URLs for this album.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ExternalUrlObject? ExternalUrls { get; set; }
#nullable restore
#else
        public ExternalUrlObject ExternalUrls { get; set; }
#endif
        /// <summary>A list of the genres the album is associated with. If not yet classified, the array is empty.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Genres { get; set; }
#nullable restore
#else
        public List<string> Genres { get; set; }
#endif
        /// <summary>A link to the Web API endpoint providing full details of the album.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Href { get; set; }
#nullable restore
#else
        public string Href { get; set; }
#endif
        /// <summary>The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) for the album.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The cover art for the album in various sizes, widest first.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ImageObject>? Images { get; set; }
#nullable restore
#else
        public List<ImageObject> Images { get; set; }
#endif
        /// <summary>The label associated with the album.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Label { get; set; }
#nullable restore
#else
        public string Label { get; set; }
#endif
        /// <summary>The name of the album. In case of an album takedown, the value may be an empty string.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The popularity of the album. The value will be between 0 and 100, with 100 being the most popular.</summary>
        public int? Popularity { get; set; }
        /// <summary>The date the album was first released.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReleaseDate { get; set; }
#nullable restore
#else
        public string ReleaseDate { get; set; }
#endif
        /// <summary>The precision with which `release_date` value is known.</summary>
        public AlbumBase_release_date_precision? ReleaseDatePrecision { get; set; }
        /// <summary>Included in the response when a content restriction is applied.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AlbumRestrictionObject? Restrictions { get; set; }
#nullable restore
#else
        public AlbumRestrictionObject Restrictions { get; set; }
#endif
        /// <summary>The number of tracks in the album.</summary>
        public int? TotalTracks { get; set; }
        /// <summary>The object type.</summary>
        public AlbumBase_type? Type { get; set; }
        /// <summary>The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the album.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Uri { get; set; }
#nullable restore
#else
        public string Uri { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="AlbumBase"/> and sets the default values.
        /// </summary>
        public AlbumBase()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="AlbumBase"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static AlbumBase CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new AlbumBase();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"album_type", n => { AlbumType = n.GetEnumValue<AlbumBase_album_type>(); } },
                {"available_markets", n => { AvailableMarkets = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"copyrights", n => { Copyrights = n.GetCollectionOfObjectValues<CopyrightObject>(CopyrightObject.CreateFromDiscriminatorValue)?.ToList(); } },
                {"external_ids", n => { ExternalIds = n.GetObjectValue<ExternalIdObject>(ExternalIdObject.CreateFromDiscriminatorValue); } },
                {"external_urls", n => { ExternalUrls = n.GetObjectValue<ExternalUrlObject>(ExternalUrlObject.CreateFromDiscriminatorValue); } },
                {"genres", n => { Genres = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"href", n => { Href = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"images", n => { Images = n.GetCollectionOfObjectValues<ImageObject>(ImageObject.CreateFromDiscriminatorValue)?.ToList(); } },
                {"label", n => { Label = n.GetStringValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"popularity", n => { Popularity = n.GetIntValue(); } },
                {"release_date", n => { ReleaseDate = n.GetStringValue(); } },
                {"release_date_precision", n => { ReleaseDatePrecision = n.GetEnumValue<AlbumBase_release_date_precision>(); } },
                {"restrictions", n => { Restrictions = n.GetObjectValue<AlbumRestrictionObject>(AlbumRestrictionObject.CreateFromDiscriminatorValue); } },
                {"total_tracks", n => { TotalTracks = n.GetIntValue(); } },
                {"type", n => { Type = n.GetEnumValue<AlbumBase_type>(); } },
                {"uri", n => { Uri = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<AlbumBase_album_type>("album_type", AlbumType);
            writer.WriteCollectionOfPrimitiveValues<string>("available_markets", AvailableMarkets);
            writer.WriteCollectionOfObjectValues<CopyrightObject>("copyrights", Copyrights);
            writer.WriteObjectValue<ExternalIdObject>("external_ids", ExternalIds);
            writer.WriteObjectValue<ExternalUrlObject>("external_urls", ExternalUrls);
            writer.WriteCollectionOfPrimitiveValues<string>("genres", Genres);
            writer.WriteStringValue("href", Href);
            writer.WriteStringValue("id", Id);
            writer.WriteCollectionOfObjectValues<ImageObject>("images", Images);
            writer.WriteStringValue("label", Label);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("popularity", Popularity);
            writer.WriteStringValue("release_date", ReleaseDate);
            writer.WriteEnumValue<AlbumBase_release_date_precision>("release_date_precision", ReleaseDatePrecision);
            writer.WriteObjectValue<AlbumRestrictionObject>("restrictions", Restrictions);
            writer.WriteIntValue("total_tracks", TotalTracks);
            writer.WriteEnumValue<AlbumBase_type>("type", Type);
            writer.WriteStringValue("uri", Uri);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
