// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Spotify.Models {
    public class DeviceObject : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The device ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>If this device is the currently active device.</summary>
        public bool? IsActive { get; set; }
        /// <summary>If this device is currently in a private session.</summary>
        public bool? IsPrivateSession { get; set; }
        /// <summary>Whether controlling this device is restricted. At present if this is &quot;true&quot; then no Web API commands will be accepted by this device.</summary>
        public bool? IsRestricted { get; set; }
        /// <summary>A human-readable name for the device. Some devices have a name that the user can configure (e.g. \&quot;Loudest speaker\&quot;) and some devices have a generic name associated with the manufacturer or device model.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Device type, such as &quot;computer&quot;, &quot;smartphone&quot; or &quot;speaker&quot;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The current volume in percent.</summary>
        public int? VolumePercent { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="DeviceObject"/> and sets the default values.
        /// </summary>
        public DeviceObject()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="DeviceObject"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static DeviceObject CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new DeviceObject();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"id", n => { Id = n.GetStringValue(); } },
                {"is_active", n => { IsActive = n.GetBoolValue(); } },
                {"is_private_session", n => { IsPrivateSession = n.GetBoolValue(); } },
                {"is_restricted", n => { IsRestricted = n.GetBoolValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"type", n => { Type = n.GetStringValue(); } },
                {"volume_percent", n => { VolumePercent = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("is_active", IsActive);
            writer.WriteBoolValue("is_private_session", IsPrivateSession);
            writer.WriteBoolValue("is_restricted", IsRestricted);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("type", Type);
            writer.WriteIntValue("volume_percent", VolumePercent);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
