// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Spotify.Models {
    /// <summary>
    /// The album on which the track appears. The album object includes a link in `href` to full information about the album.
    /// </summary>
    public class Tracks : AlbumBase, IParsable 
    {
        /// <summary>The field is present when getting an artist&apos;s albums. Compare to album_type this field represents relationship between the artist and the album.</summary>
        public Tracks_album_group? AlbumGroup { get; set; }
        /// <summary>The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<SimplifiedArtistObject>? Artists { get; set; }
#nullable restore
#else
        public List<SimplifiedArtistObject> Artists { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Tracks"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new Tracks CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Tracks();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"album_group", n => { AlbumGroup = n.GetEnumValue<Tracks_album_group>(); } },
                {"artists", n => { Artists = n.GetCollectionOfObjectValues<SimplifiedArtistObject>(SimplifiedArtistObject.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<Tracks_album_group>("album_group", AlbumGroup);
            writer.WriteCollectionOfObjectValues<SimplifiedArtistObject>("artists", Artists);
        }
    }
}
