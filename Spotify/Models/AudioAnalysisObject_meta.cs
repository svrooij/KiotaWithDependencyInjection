// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Spotify.Models {
    public class AudioAnalysisObject_meta : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The amount of time taken to analyze this track.</summary>
        public double? AnalysisTime { get; set; }
        /// <summary>The version of the Analyzer used to analyze this track.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AnalyzerVersion { get; set; }
#nullable restore
#else
        public string AnalyzerVersion { get; set; }
#endif
        /// <summary>A detailed status code for this track. If analysis data is missing, this code may explain why.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DetailedStatus { get; set; }
#nullable restore
#else
        public string DetailedStatus { get; set; }
#endif
        /// <summary>The method used to read the track&apos;s audio data.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InputProcess { get; set; }
#nullable restore
#else
        public string InputProcess { get; set; }
#endif
        /// <summary>The platform used to read the track&apos;s audio data.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Platform { get; set; }
#nullable restore
#else
        public string Platform { get; set; }
#endif
        /// <summary>The return code of the analyzer process. 0 if successful, 1 if any errors occurred.</summary>
        public int? StatusCode { get; set; }
        /// <summary>The Unix timestamp (in seconds) at which this track was analyzed.</summary>
        public int? Timestamp { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="AudioAnalysisObject_meta"/> and sets the default values.
        /// </summary>
        public AudioAnalysisObject_meta()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="AudioAnalysisObject_meta"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static AudioAnalysisObject_meta CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new AudioAnalysisObject_meta();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"analysis_time", n => { AnalysisTime = n.GetDoubleValue(); } },
                {"analyzer_version", n => { AnalyzerVersion = n.GetStringValue(); } },
                {"detailed_status", n => { DetailedStatus = n.GetStringValue(); } },
                {"input_process", n => { InputProcess = n.GetStringValue(); } },
                {"platform", n => { Platform = n.GetStringValue(); } },
                {"status_code", n => { StatusCode = n.GetIntValue(); } },
                {"timestamp", n => { Timestamp = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("analysis_time", AnalysisTime);
            writer.WriteStringValue("analyzer_version", AnalyzerVersion);
            writer.WriteStringValue("detailed_status", DetailedStatus);
            writer.WriteStringValue("input_process", InputProcess);
            writer.WriteStringValue("platform", Platform);
            writer.WriteIntValue("status_code", StatusCode);
            writer.WriteIntValue("timestamp", Timestamp);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
