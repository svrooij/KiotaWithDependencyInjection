// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Spotify.Models {
    public class EpisodeBase : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A URL to a 30 second preview (MP3 format) of the episode. `null` if not available.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AudioPreviewUrl { get; set; }
#nullable restore
#else
        public string AudioPreviewUrl { get; set; }
#endif
        /// <summary>A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The episode length in milliseconds.</summary>
        public int? DurationMs { get; set; }
        /// <summary>Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown).</summary>
        public bool? Explicit { get; set; }
        /// <summary>External URLs for this episode.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ExternalUrlObject? ExternalUrls { get; set; }
#nullable restore
#else
        public ExternalUrlObject ExternalUrls { get; set; }
#endif
        /// <summary>A link to the Web API endpoint providing full details of the episode.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Href { get; set; }
#nullable restore
#else
        public string Href { get; set; }
#endif
        /// <summary>A description of the episode. This field may contain HTML tags.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HtmlDescription { get; set; }
#nullable restore
#else
        public string HtmlDescription { get; set; }
#endif
        /// <summary>The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) for the episode.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The cover art for the episode in various sizes, widest first.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ImageObject>? Images { get; set; }
#nullable restore
#else
        public List<ImageObject> Images { get; set; }
#endif
        /// <summary>True if the episode is hosted outside of Spotify&apos;s CDN.</summary>
        public bool? IsExternallyHosted { get; set; }
        /// <summary>True if the episode is playable in the given market. Otherwise false.</summary>
        public bool? IsPlayable { get; set; }
        /// <summary>The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead.</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Language { get; set; }
#nullable restore
#else
        public string Language { get; set; }
#endif
        /// <summary>A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Languages { get; set; }
#nullable restore
#else
        public List<string> Languages { get; set; }
#endif
        /// <summary>The name of the episode.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The date the episode was first released, for example `&quot;1981-12-15&quot;`. Depending on the precision, it might be shown as `&quot;1981&quot;` or `&quot;1981-12&quot;`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReleaseDate { get; set; }
#nullable restore
#else
        public string ReleaseDate { get; set; }
#endif
        /// <summary>The precision with which `release_date` value is known.</summary>
        public EpisodeBase_release_date_precision? ReleaseDatePrecision { get; set; }
        /// <summary>Included in the response when a content restriction is applied.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public EpisodeRestrictionObject? Restrictions { get; set; }
#nullable restore
#else
        public EpisodeRestrictionObject Restrictions { get; set; }
#endif
        /// <summary>The user&apos;s most recent position in the episode. Set if the supplied access token is a user token and has the scope &apos;user-read-playback-position&apos;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ResumePointObject? ResumePoint { get; set; }
#nullable restore
#else
        public ResumePointObject ResumePoint { get; set; }
#endif
        /// <summary>The object type.</summary>
        public EpisodeBase_type? Type { get; set; }
        /// <summary>The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the episode.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Uri { get; set; }
#nullable restore
#else
        public string Uri { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="EpisodeBase"/> and sets the default values.
        /// </summary>
        public EpisodeBase()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="EpisodeBase"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static EpisodeBase CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new EpisodeBase();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"audio_preview_url", n => { AudioPreviewUrl = n.GetStringValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"duration_ms", n => { DurationMs = n.GetIntValue(); } },
                {"explicit", n => { Explicit = n.GetBoolValue(); } },
                {"external_urls", n => { ExternalUrls = n.GetObjectValue<ExternalUrlObject>(ExternalUrlObject.CreateFromDiscriminatorValue); } },
                {"href", n => { Href = n.GetStringValue(); } },
                {"html_description", n => { HtmlDescription = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"images", n => { Images = n.GetCollectionOfObjectValues<ImageObject>(ImageObject.CreateFromDiscriminatorValue)?.ToList(); } },
                {"is_externally_hosted", n => { IsExternallyHosted = n.GetBoolValue(); } },
                {"is_playable", n => { IsPlayable = n.GetBoolValue(); } },
                {"language", n => { Language = n.GetStringValue(); } },
                {"languages", n => { Languages = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"release_date", n => { ReleaseDate = n.GetStringValue(); } },
                {"release_date_precision", n => { ReleaseDatePrecision = n.GetEnumValue<EpisodeBase_release_date_precision>(); } },
                {"restrictions", n => { Restrictions = n.GetObjectValue<EpisodeRestrictionObject>(EpisodeRestrictionObject.CreateFromDiscriminatorValue); } },
                {"resume_point", n => { ResumePoint = n.GetObjectValue<ResumePointObject>(ResumePointObject.CreateFromDiscriminatorValue); } },
                {"type", n => { Type = n.GetEnumValue<EpisodeBase_type>(); } },
                {"uri", n => { Uri = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("audio_preview_url", AudioPreviewUrl);
            writer.WriteStringValue("description", Description);
            writer.WriteIntValue("duration_ms", DurationMs);
            writer.WriteBoolValue("explicit", Explicit);
            writer.WriteObjectValue<ExternalUrlObject>("external_urls", ExternalUrls);
            writer.WriteStringValue("href", Href);
            writer.WriteStringValue("html_description", HtmlDescription);
            writer.WriteStringValue("id", Id);
            writer.WriteCollectionOfObjectValues<ImageObject>("images", Images);
            writer.WriteBoolValue("is_externally_hosted", IsExternallyHosted);
            writer.WriteBoolValue("is_playable", IsPlayable);
            writer.WriteStringValue("language", Language);
            writer.WriteCollectionOfPrimitiveValues<string>("languages", Languages);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("release_date", ReleaseDate);
            writer.WriteEnumValue<EpisodeBase_release_date_precision>("release_date_precision", ReleaseDatePrecision);
            writer.WriteObjectValue<EpisodeRestrictionObject>("restrictions", Restrictions);
            writer.WriteObjectValue<ResumePointObject>("resume_point", ResumePoint);
            writer.WriteEnumValue<EpisodeBase_type>("type", Type);
            writer.WriteStringValue("uri", Uri);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
