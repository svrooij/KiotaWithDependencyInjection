// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Spotify.Models;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Spotify.Me.Top.Item {
    public class WithTypeGetResponse : PagingObject, IParsable 
    {
        /// <summary>The items property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<WithTypeGetResponse_items>? Items { get; set; }
#nullable restore
#else
        public List<WithTypeGetResponse_items> Items { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="WithTypeGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new WithTypeGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WithTypeGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                {"items", n => { Items = n.GetCollectionOfObjectValues<WithTypeGetResponse_items>(WithTypeGetResponse_items.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<WithTypeGetResponse_items>("items", Items);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="ArtistObject"/>, <see cref="TrackObject"/>
        /// </summary>
        public class WithTypeGetResponse_items : IComposedTypeWrapper, IParsable 
        {
            /// <summary>Composed type representation for type <see cref="Spotify.Models.ArtistObject"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public Spotify.Models.ArtistObject? ArtistObject { get; set; }
#nullable restore
#else
            public Spotify.Models.ArtistObject ArtistObject { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="Spotify.Models.TrackObject"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public Spotify.Models.TrackObject? TrackObject { get; set; }
#nullable restore
#else
            public Spotify.Models.TrackObject TrackObject { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="WithTypeGetResponse_items"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static WithTypeGetResponse_items CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("type")?.GetStringValue();
                var result = new WithTypeGetResponse_items();
                if("ArtistObject".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ArtistObject = new Spotify.Models.ArtistObject();
                }
                else if("TrackObject".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.TrackObject = new Spotify.Models.TrackObject();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(ArtistObject != null)
                {
                    return ArtistObject.GetFieldDeserializers();
                }
                else if(TrackObject != null)
                {
                    return TrackObject.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(ArtistObject != null)
                {
                    writer.WriteObjectValue<Spotify.Models.ArtistObject>(null, ArtistObject);
                }
                else if(TrackObject != null)
                {
                    writer.WriteObjectValue<Spotify.Models.TrackObject>(null, TrackObject);
                }
            }
        }
    }
}
