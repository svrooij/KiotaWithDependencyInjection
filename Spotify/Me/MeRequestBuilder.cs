// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Spotify.Me.Albums;
using Spotify.Me.Audiobooks;
using Spotify.Me.Episodes;
using Spotify.Me.Following;
using Spotify.Me.Player;
using Spotify.Me.Playlists;
using Spotify.Me.Shows;
using Spotify.Me.Top;
using Spotify.Me.Tracks;
using Spotify.Models;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Spotify.Me {
    /// <summary>
    /// Builds and executes requests for operations under \me
    /// </summary>
    public class MeRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>The albums property</summary>
        public AlbumsRequestBuilder Albums
        {
            get => new AlbumsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The audiobooks property</summary>
        public AudiobooksRequestBuilder Audiobooks
        {
            get => new AudiobooksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The episodes property</summary>
        public EpisodesRequestBuilder Episodes
        {
            get => new EpisodesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The following property</summary>
        public FollowingRequestBuilder Following
        {
            get => new FollowingRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The player property</summary>
        public PlayerRequestBuilder Player
        {
            get => new PlayerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The playlists property</summary>
        public PlaylistsRequestBuilder Playlists
        {
            get => new PlaylistsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The shows property</summary>
        public ShowsRequestBuilder Shows
        {
            get => new ShowsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The top property</summary>
        public TopRequestBuilder Top
        {
            get => new TopRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tracks property</summary>
        public TracksRequestBuilder Tracks
        {
            get => new TracksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="MeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MeRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/me", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="MeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MeRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/me", rawUrl)
        {
        }
        /// <summary>
        /// Get detailed profile information about the current user (including thecurrent user&apos;s username).
        /// </summary>
        /// <returns>A <see cref="PrivateUserObject"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="PrivateUserObject401Error">When receiving a 401 status code</exception>
        /// <exception cref="PrivateUserObject403Error">When receiving a 403 status code</exception>
        /// <exception cref="PrivateUserObject429Error">When receiving a 429 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<PrivateUserObject?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<PrivateUserObject> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"401", PrivateUserObject401Error.CreateFromDiscriminatorValue},
                {"403", PrivateUserObject403Error.CreateFromDiscriminatorValue},
                {"429", PrivateUserObject429Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<PrivateUserObject>(requestInfo, PrivateUserObject.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get detailed profile information about the current user (including thecurrent user&apos;s username).
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="MeRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public MeRequestBuilder WithUrl(string rawUrl)
        {
            return new MeRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class MeRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters> 
        {
        }
    }
}
