// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Spotify.Me.Player.Play {
    public class PlayPutRequestBody : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Optional. Spotify URI of the context to play.Valid contexts are albums, artists &amp; playlists.`{context_uri:&quot;spotify:album:1Je1IMUlBXcx1Fz0WE7oPT&quot;}`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContextUri { get; set; }
#nullable restore
#else
        public string ContextUri { get; set; }
#endif
        /// <summary>Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object&quot;position&quot; is zero based and canâ€™t be negative. Example: `&quot;offset&quot;: {&quot;position&quot;: 5}`&quot;uri&quot; is a string representing the uri of the item to start at. Example: `&quot;offset&quot;: {&quot;uri&quot;: &quot;spotify:track:1301WleyT98MSxVHPZCA6M&quot;}`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public PlayPutRequestBody_offset? Offset { get; set; }
#nullable restore
#else
        public PlayPutRequestBody_offset Offset { get; set; }
#endif
        /// <summary>integer</summary>
        public int? PositionMs { get; set; }
        /// <summary>Optional. A JSON array of the Spotify track URIs to play.For example: `{&quot;uris&quot;: [&quot;spotify:track:4iV5W9uYEdYUVa79Axb7Rh&quot;, &quot;spotify:track:1301WleyT98MSxVHPZCA6M&quot;]}`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Uris { get; set; }
#nullable restore
#else
        public List<string> Uris { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="PlayPutRequestBody"/> and sets the default values.
        /// </summary>
        public PlayPutRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PlayPutRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PlayPutRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PlayPutRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"context_uri", n => { ContextUri = n.GetStringValue(); } },
                {"offset", n => { Offset = n.GetObjectValue<PlayPutRequestBody_offset>(PlayPutRequestBody_offset.CreateFromDiscriminatorValue); } },
                {"position_ms", n => { PositionMs = n.GetIntValue(); } },
                {"uris", n => { Uris = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("context_uri", ContextUri);
            writer.WriteObjectValue<PlayPutRequestBody_offset>("offset", Offset);
            writer.WriteIntValue("position_ms", PositionMs);
            writer.WriteCollectionOfPrimitiveValues<string>("uris", Uris);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
