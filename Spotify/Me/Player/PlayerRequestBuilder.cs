// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Spotify.Me.Player.CurrentlyPlaying;
using Spotify.Me.Player.Devices;
using Spotify.Me.Player.Next;
using Spotify.Me.Player.Pause;
using Spotify.Me.Player.Play;
using Spotify.Me.Player.Previous;
using Spotify.Me.Player.Queue;
using Spotify.Me.Player.RecentlyPlayed;
using Spotify.Me.Player.Repeat;
using Spotify.Me.Player.Seek;
using Spotify.Me.Player.Shuffle;
using Spotify.Me.Player.Volume;
using Spotify.Models;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Spotify.Me.Player {
    /// <summary>
    /// Builds and executes requests for operations under \me\player
    /// </summary>
    public class PlayerRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>The currentlyPlaying property</summary>
        public CurrentlyPlayingRequestBuilder CurrentlyPlaying
        {
            get => new CurrentlyPlayingRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The devices property</summary>
        public DevicesRequestBuilder Devices
        {
            get => new DevicesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The next property</summary>
        public NextRequestBuilder Next
        {
            get => new NextRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The pause property</summary>
        public PauseRequestBuilder Pause
        {
            get => new PauseRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The play property</summary>
        public PlayRequestBuilder Play
        {
            get => new PlayRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The previous property</summary>
        public PreviousRequestBuilder Previous
        {
            get => new PreviousRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The queue property</summary>
        public QueueRequestBuilder Queue
        {
            get => new QueueRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The recentlyPlayed property</summary>
        public RecentlyPlayedRequestBuilder RecentlyPlayed
        {
            get => new RecentlyPlayedRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The repeat property</summary>
        public RepeatRequestBuilder Repeat
        {
            get => new RepeatRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The seek property</summary>
        public SeekRequestBuilder Seek
        {
            get => new SeekRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The shuffle property</summary>
        public ShuffleRequestBuilder Shuffle
        {
            get => new ShuffleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The volume property</summary>
        public VolumeRequestBuilder Volume
        {
            get => new VolumeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="PlayerRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PlayerRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/me/player{?additional_types*,market*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="PlayerRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PlayerRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/me/player{?additional_types*,market*}", rawUrl)
        {
        }
        /// <summary>
        /// Get information about the user’s current playback state, including track or episode, progress, and active device.
        /// </summary>
        /// <returns>A <see cref="CurrentlyPlayingContextObject"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="CurrentlyPlayingContextObject401Error">When receiving a 401 status code</exception>
        /// <exception cref="CurrentlyPlayingContextObject403Error">When receiving a 403 status code</exception>
        /// <exception cref="CurrentlyPlayingContextObject429Error">When receiving a 429 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<CurrentlyPlayingContextObject?> GetAsync(Action<RequestConfiguration<PlayerRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<CurrentlyPlayingContextObject> GetAsync(Action<RequestConfiguration<PlayerRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"401", CurrentlyPlayingContextObject401Error.CreateFromDiscriminatorValue},
                {"403", CurrentlyPlayingContextObject403Error.CreateFromDiscriminatorValue},
                {"429", CurrentlyPlayingContextObject429Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<CurrentlyPlayingContextObject>(requestInfo, CurrentlyPlayingContextObject.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Transfer playback to a new device and determine if it should start playing.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="Player401Error">When receiving a 401 status code</exception>
        /// <exception cref="Player403Error">When receiving a 403 status code</exception>
        /// <exception cref="Player429Error">When receiving a 429 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PutAsync(PlayerPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PutAsync(PlayerPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"401", Player401Error.CreateFromDiscriminatorValue},
                {"403", Player403Error.CreateFromDiscriminatorValue},
                {"429", Player429Error.CreateFromDiscriminatorValue},
            };
            await RequestAdapter.SendNoContentAsync(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get information about the user’s current playback state, including track or episode, progress, and active device.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<PlayerRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<PlayerRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Transfer playback to a new device and determine if it should start playing.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(PlayerPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(PlayerPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, "{+baseurl}/me/player", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="PlayerRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public PlayerRequestBuilder WithUrl(string rawUrl)
        {
            return new PlayerRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get information about the user’s current playback state, including track or episode, progress, and active device.
        /// </summary>
        public class PlayerRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("additional_types")]
            public string? AdditionalTypes { get; set; }
#nullable restore
#else
            [QueryParameter("additional_types")]
            public string AdditionalTypes { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("market")]
            public string? Market { get; set; }
#nullable restore
#else
            [QueryParameter("market")]
            public string Market { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class PlayerRequestBuilderGetRequestConfiguration : RequestConfiguration<PlayerRequestBuilderGetQueryParameters> 
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class PlayerRequestBuilderPutRequestConfiguration : RequestConfiguration<DefaultQueryParameters> 
        {
        }
    }
}
