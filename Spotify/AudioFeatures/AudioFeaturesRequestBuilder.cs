// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Spotify.AudioFeatures.Item;
using Spotify.Models;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Spotify.AudioFeatures {
    /// <summary>
    /// Builds and executes requests for operations under \audio-features
    /// </summary>
    public class AudioFeaturesRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>Gets an item from the Spotify.audioFeatures.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="AudioFeaturesItemRequestBuilder"/></returns>
        public AudioFeaturesItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new AudioFeaturesItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="AudioFeaturesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AudioFeaturesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/audio-features?ids={ids}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="AudioFeaturesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AudioFeaturesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/audio-features?ids={ids}", rawUrl)
        {
        }
        /// <summary>
        /// Get audio features for multiple tracks based on their Spotify IDs.
        /// </summary>
        /// <returns>A <see cref="AudioFeaturesGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="AudioFeatures401Error">When receiving a 401 status code</exception>
        /// <exception cref="AudioFeatures403Error">When receiving a 403 status code</exception>
        /// <exception cref="AudioFeatures429Error">When receiving a 429 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<AudioFeaturesGetResponse?> GetAsAudioFeaturesGetResponseAsync(Action<RequestConfiguration<AudioFeaturesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<AudioFeaturesGetResponse> GetAsAudioFeaturesGetResponseAsync(Action<RequestConfiguration<AudioFeaturesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"401", AudioFeatures401Error.CreateFromDiscriminatorValue},
                {"403", AudioFeatures403Error.CreateFromDiscriminatorValue},
                {"429", AudioFeatures429Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<AudioFeaturesGetResponse>(requestInfo, AudioFeaturesGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get audio features for multiple tracks based on their Spotify IDs.
        /// </summary>
        /// <returns>A <see cref="AudioFeaturesResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="AudioFeatures401Error">When receiving a 401 status code</exception>
        /// <exception cref="AudioFeatures403Error">When receiving a 403 status code</exception>
        /// <exception cref="AudioFeatures429Error">When receiving a 429 status code</exception>
        [Obsolete("This method is obsolete. Use GetAsAudioFeaturesGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<AudioFeaturesResponse?> GetAsync(Action<RequestConfiguration<AudioFeaturesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<AudioFeaturesResponse> GetAsync(Action<RequestConfiguration<AudioFeaturesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"401", AudioFeatures401Error.CreateFromDiscriminatorValue},
                {"403", AudioFeatures403Error.CreateFromDiscriminatorValue},
                {"429", AudioFeatures429Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<AudioFeaturesResponse>(requestInfo, AudioFeaturesResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get audio features for multiple tracks based on their Spotify IDs.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<AudioFeaturesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<AudioFeaturesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="AudioFeaturesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public AudioFeaturesRequestBuilder WithUrl(string rawUrl)
        {
            return new AudioFeaturesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get audio features for multiple tracks based on their Spotify IDs.
        /// </summary>
        public class AudioFeaturesRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("ids")]
            public string? Ids { get; set; }
#nullable restore
#else
            [QueryParameter("ids")]
            public string Ids { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class AudioFeaturesRequestBuilderGetRequestConfiguration : RequestConfiguration<AudioFeaturesRequestBuilderGetQueryParameters> 
        {
        }
    }
}
