// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Spotify.Models;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Spotify.Playlists.Item.Tracks {
    /// <summary>
    /// Builds and executes requests for operations under \playlists\{playlist_id}\tracks
    /// </summary>
    public class TracksRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>
        /// Instantiates a new <see cref="TracksRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TracksRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/playlists/{playlist_id}/tracks{?additional_types*,fields*,limit*,market*,offset*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="TracksRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TracksRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/playlists/{playlist_id}/tracks{?additional_types*,fields*,limit*,market*,offset*}", rawUrl)
        {
        }
        /// <summary>
        /// Remove one or more items from a user&apos;s playlist.
        /// </summary>
        /// <returns>A <see cref="TracksDeleteResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="Tracks401Error">When receiving a 401 status code</exception>
        /// <exception cref="Tracks403Error">When receiving a 403 status code</exception>
        /// <exception cref="Tracks429Error">When receiving a 429 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<TracksDeleteResponse?> DeleteAsTracksDeleteResponseAsync(TracksDeleteRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<TracksDeleteResponse> DeleteAsTracksDeleteResponseAsync(TracksDeleteRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToDeleteRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"401", Tracks401Error.CreateFromDiscriminatorValue},
                {"403", Tracks403Error.CreateFromDiscriminatorValue},
                {"429", Tracks429Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<TracksDeleteResponse>(requestInfo, TracksDeleteResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Remove one or more items from a user&apos;s playlist.
        /// </summary>
        /// <returns>A <see cref="TracksResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="Tracks401Error">When receiving a 401 status code</exception>
        /// <exception cref="Tracks403Error">When receiving a 403 status code</exception>
        /// <exception cref="Tracks429Error">When receiving a 429 status code</exception>
        [Obsolete("This method is obsolete. Use DeleteAsTracksDeleteResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<TracksResponse?> DeleteAsync(TracksDeleteRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<TracksResponse> DeleteAsync(TracksDeleteRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToDeleteRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"401", Tracks401Error.CreateFromDiscriminatorValue},
                {"403", Tracks403Error.CreateFromDiscriminatorValue},
                {"429", Tracks429Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<TracksResponse>(requestInfo, TracksResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get full details of the items of a playlist owned by a Spotify user.
        /// </summary>
        /// <returns>A <see cref="PagingPlaylistTrackObject"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="PagingPlaylistTrackObject401Error">When receiving a 401 status code</exception>
        /// <exception cref="PagingPlaylistTrackObject403Error">When receiving a 403 status code</exception>
        /// <exception cref="PagingPlaylistTrackObject429Error">When receiving a 429 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<PagingPlaylistTrackObject?> GetAsync(Action<RequestConfiguration<TracksRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<PagingPlaylistTrackObject> GetAsync(Action<RequestConfiguration<TracksRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"401", PagingPlaylistTrackObject401Error.CreateFromDiscriminatorValue},
                {"403", PagingPlaylistTrackObject403Error.CreateFromDiscriminatorValue},
                {"429", PagingPlaylistTrackObject429Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<PagingPlaylistTrackObject>(requestInfo, PagingPlaylistTrackObject.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Add one or more items to a user&apos;s playlist.
        /// </summary>
        /// <returns>A <see cref="TracksPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="Tracks401Error">When receiving a 401 status code</exception>
        /// <exception cref="Tracks403Error">When receiving a 403 status code</exception>
        /// <exception cref="Tracks429Error">When receiving a 429 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<TracksPostResponse?> PostAsTracksPostResponseAsync(TracksPostRequestBody body, Action<RequestConfiguration<TracksRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<TracksPostResponse> PostAsTracksPostResponseAsync(TracksPostRequestBody body, Action<RequestConfiguration<TracksRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"401", Tracks401Error.CreateFromDiscriminatorValue},
                {"403", Tracks403Error.CreateFromDiscriminatorValue},
                {"429", Tracks429Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<TracksPostResponse>(requestInfo, TracksPostResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Add one or more items to a user&apos;s playlist.
        /// </summary>
        /// <returns>A <see cref="TracksResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="Tracks401Error">When receiving a 401 status code</exception>
        /// <exception cref="Tracks403Error">When receiving a 403 status code</exception>
        /// <exception cref="Tracks429Error">When receiving a 429 status code</exception>
        [Obsolete("This method is obsolete. Use PostAsTracksPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<TracksResponse?> PostAsync(TracksPostRequestBody body, Action<RequestConfiguration<TracksRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<TracksResponse> PostAsync(TracksPostRequestBody body, Action<RequestConfiguration<TracksRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"401", Tracks401Error.CreateFromDiscriminatorValue},
                {"403", Tracks403Error.CreateFromDiscriminatorValue},
                {"429", Tracks429Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<TracksResponse>(requestInfo, TracksResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Either reorder or replace items in a playlist depending on the request&apos;s parameters.To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request&apos;s body.To replace items, include `uris` as either a query parameter or in the request&apos;s body.Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.&lt;br/&gt;**Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters.These operations can&apos;t be applied together in a single request.
        /// </summary>
        /// <returns>A <see cref="TracksPutResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="Tracks401Error">When receiving a 401 status code</exception>
        /// <exception cref="Tracks403Error">When receiving a 403 status code</exception>
        /// <exception cref="Tracks429Error">When receiving a 429 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<TracksPutResponse?> PutAsTracksPutResponseAsync(TracksPutRequestBody body, Action<RequestConfiguration<TracksRequestBuilderPutQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<TracksPutResponse> PutAsTracksPutResponseAsync(TracksPutRequestBody body, Action<RequestConfiguration<TracksRequestBuilderPutQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"401", Tracks401Error.CreateFromDiscriminatorValue},
                {"403", Tracks403Error.CreateFromDiscriminatorValue},
                {"429", Tracks429Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<TracksPutResponse>(requestInfo, TracksPutResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Either reorder or replace items in a playlist depending on the request&apos;s parameters.To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request&apos;s body.To replace items, include `uris` as either a query parameter or in the request&apos;s body.Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.&lt;br/&gt;**Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters.These operations can&apos;t be applied together in a single request.
        /// </summary>
        /// <returns>A <see cref="TracksResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="Tracks401Error">When receiving a 401 status code</exception>
        /// <exception cref="Tracks403Error">When receiving a 403 status code</exception>
        /// <exception cref="Tracks429Error">When receiving a 429 status code</exception>
        [Obsolete("This method is obsolete. Use PutAsTracksPutResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<TracksResponse?> PutAsync(TracksPutRequestBody body, Action<RequestConfiguration<TracksRequestBuilderPutQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<TracksResponse> PutAsync(TracksPutRequestBody body, Action<RequestConfiguration<TracksRequestBuilderPutQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"401", Tracks401Error.CreateFromDiscriminatorValue},
                {"403", Tracks403Error.CreateFromDiscriminatorValue},
                {"429", Tracks429Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<TracksResponse>(requestInfo, TracksResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Remove one or more items from a user&apos;s playlist.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(TracksDeleteRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(TracksDeleteRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.DELETE, "{+baseurl}/playlists/{playlist_id}/tracks", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Get full details of the items of a playlist owned by a Spotify user.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<TracksRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<TracksRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Add one or more items to a user&apos;s playlist.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(TracksPostRequestBody body, Action<RequestConfiguration<TracksRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(TracksPostRequestBody body, Action<RequestConfiguration<TracksRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, "{+baseurl}/playlists/{playlist_id}/tracks{?position*,uris*}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Either reorder or replace items in a playlist depending on the request&apos;s parameters.To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request&apos;s body.To replace items, include `uris` as either a query parameter or in the request&apos;s body.Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.&lt;br/&gt;**Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters.These operations can&apos;t be applied together in a single request.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(TracksPutRequestBody body, Action<RequestConfiguration<TracksRequestBuilderPutQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(TracksPutRequestBody body, Action<RequestConfiguration<TracksRequestBuilderPutQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, "{+baseurl}/playlists/{playlist_id}/tracks{?uris*}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="TracksRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public TracksRequestBuilder WithUrl(string rawUrl)
        {
            return new TracksRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class TracksRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters> 
        {
        }
        /// <summary>
        /// Get full details of the items of a playlist owned by a Spotify user.
        /// </summary>
        public class TracksRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("additional_types")]
            public string? AdditionalTypes { get; set; }
#nullable restore
#else
            [QueryParameter("additional_types")]
            public string AdditionalTypes { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("fields")]
            public string? Fields { get; set; }
#nullable restore
#else
            [QueryParameter("fields")]
            public string Fields { get; set; }
#endif
            [QueryParameter("limit")]
            public int? Limit { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("market")]
            public string? Market { get; set; }
#nullable restore
#else
            [QueryParameter("market")]
            public string Market { get; set; }
#endif
            [QueryParameter("offset")]
            public int? Offset { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class TracksRequestBuilderGetRequestConfiguration : RequestConfiguration<TracksRequestBuilderGetQueryParameters> 
        {
        }
        /// <summary>
        /// Add one or more items to a user&apos;s playlist.
        /// </summary>
        public class TracksRequestBuilderPostQueryParameters 
        {
            [QueryParameter("position")]
            public int? Position { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("uris")]
            public string? Uris { get; set; }
#nullable restore
#else
            [QueryParameter("uris")]
            public string Uris { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class TracksRequestBuilderPostRequestConfiguration : RequestConfiguration<TracksRequestBuilderPostQueryParameters> 
        {
        }
        /// <summary>
        /// Either reorder or replace items in a playlist depending on the request&apos;s parameters.To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request&apos;s body.To replace items, include `uris` as either a query parameter or in the request&apos;s body.Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.&lt;br/&gt;**Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters.These operations can&apos;t be applied together in a single request.
        /// </summary>
        public class TracksRequestBuilderPutQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("uris")]
            public string? Uris { get; set; }
#nullable restore
#else
            [QueryParameter("uris")]
            public string Uris { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class TracksRequestBuilderPutRequestConfiguration : RequestConfiguration<TracksRequestBuilderPutQueryParameters> 
        {
        }
    }
}
