// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Spotify.Playlists.Item.Tracks {
    public class TracksPutRequestBody : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The position where the items should be inserted.&lt;br/&gt;To reorder the items to the end of the playlist, simply set _insert_before_ to the position after the last item.&lt;br/&gt;Examples:&lt;br/&gt;To reorder the first item to the last position in a playlist with 10 items, set _range_start_ to 0, and _insert_before_ to 10.&lt;br/&gt;To reorder the last item in a playlist with 10 items to the start of the playlist, set _range_start_ to 9, and _insert_before_ to 0.</summary>
        public int? InsertBefore { get; set; }
        /// <summary>The amount of items to be reordered. Defaults to 1 if not set.&lt;br/&gt;The range of items to be reordered begins from the _range_start_ position, and includes the _range_length_ subsequent items.&lt;br/&gt;Example:&lt;br/&gt;To move the items at index 9-10 to the start of the playlist, _range_start_ is set to 9, and _range_length_ is set to 2.</summary>
        public int? RangeLength { get; set; }
        /// <summary>The position of the first item to be reordered.</summary>
        public int? RangeStart { get; set; }
        /// <summary>The playlist&apos;s snapshot ID against which you want to make the changes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SnapshotId { get; set; }
#nullable restore
#else
        public string SnapshotId { get; set; }
#endif
        /// <summary>The uris property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Uris { get; set; }
#nullable restore
#else
        public List<string> Uris { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="TracksPutRequestBody"/> and sets the default values.
        /// </summary>
        public TracksPutRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="TracksPutRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static TracksPutRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new TracksPutRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"insert_before", n => { InsertBefore = n.GetIntValue(); } },
                {"range_length", n => { RangeLength = n.GetIntValue(); } },
                {"range_start", n => { RangeStart = n.GetIntValue(); } },
                {"snapshot_id", n => { SnapshotId = n.GetStringValue(); } },
                {"uris", n => { Uris = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("insert_before", InsertBefore);
            writer.WriteIntValue("range_length", RangeLength);
            writer.WriteIntValue("range_start", RangeStart);
            writer.WriteStringValue("snapshot_id", SnapshotId);
            writer.WriteCollectionOfPrimitiveValues<string>("uris", Uris);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
