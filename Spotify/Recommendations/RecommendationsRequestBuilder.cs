// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Spotify.Models;
using Spotify.Recommendations.AvailableGenreSeeds;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Spotify.Recommendations {
    /// <summary>
    /// Builds and executes requests for operations under \recommendations
    /// </summary>
    public class RecommendationsRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>The availableGenreSeeds property</summary>
        public AvailableGenreSeedsRequestBuilder AvailableGenreSeeds
        {
            get => new AvailableGenreSeedsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="RecommendationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RecommendationsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/recommendations?seed_artists={seed_artists}&seed_genres={seed_genres}&seed_tracks={seed_tracks}{&limit*,market*,max_acousticness*,max_danceability*,max_duration_ms*,max_energy*,max_instrumentalness*,max_key*,max_liveness*,max_loudness*,max_mode*,max_popularity*,max_speechiness*,max_tempo*,max_time_signature*,max_valence*,min_acousticness*,min_danceability*,min_duration_ms*,min_energy*,min_instrumentalness*,min_key*,min_liveness*,min_loudness*,min_mode*,min_popularity*,min_speechiness*,min_tempo*,min_time_signature*,min_valence*,target_acousticness*,target_danceability*,target_duration_ms*,target_energy*,target_instrumentalness*,target_key*,target_liveness*,target_loudness*,target_mode*,target_popularity*,target_speechiness*,target_tempo*,target_time_signature*,target_valence*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="RecommendationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RecommendationsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/recommendations?seed_artists={seed_artists}&seed_genres={seed_genres}&seed_tracks={seed_tracks}{&limit*,market*,max_acousticness*,max_danceability*,max_duration_ms*,max_energy*,max_instrumentalness*,max_key*,max_liveness*,max_loudness*,max_mode*,max_popularity*,max_speechiness*,max_tempo*,max_time_signature*,max_valence*,min_acousticness*,min_danceability*,min_duration_ms*,min_energy*,min_instrumentalness*,min_key*,min_liveness*,min_loudness*,min_mode*,min_popularity*,min_speechiness*,min_tempo*,min_time_signature*,min_valence*,target_acousticness*,target_danceability*,target_duration_ms*,target_energy*,target_instrumentalness*,target_key*,target_liveness*,target_loudness*,target_mode*,target_popularity*,target_speechiness*,target_tempo*,target_time_signature*,target_valence*}", rawUrl)
        {
        }
        /// <summary>
        /// Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks.
        /// </summary>
        /// <returns>A <see cref="RecommendationsObject"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="RecommendationsObject401Error">When receiving a 401 status code</exception>
        /// <exception cref="RecommendationsObject403Error">When receiving a 403 status code</exception>
        /// <exception cref="RecommendationsObject429Error">When receiving a 429 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<RecommendationsObject?> GetAsync(Action<RequestConfiguration<RecommendationsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<RecommendationsObject> GetAsync(Action<RequestConfiguration<RecommendationsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"401", RecommendationsObject401Error.CreateFromDiscriminatorValue},
                {"403", RecommendationsObject403Error.CreateFromDiscriminatorValue},
                {"429", RecommendationsObject429Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<RecommendationsObject>(requestInfo, RecommendationsObject.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<RecommendationsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<RecommendationsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="RecommendationsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public RecommendationsRequestBuilder WithUrl(string rawUrl)
        {
            return new RecommendationsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks.
        /// </summary>
        public class RecommendationsRequestBuilderGetQueryParameters 
        {
            [QueryParameter("limit")]
            public int? Limit { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("market")]
            public string? Market { get; set; }
#nullable restore
#else
            [QueryParameter("market")]
            public string Market { get; set; }
#endif
            [QueryParameter("max_acousticness")]
            public double? MaxAcousticness { get; set; }
            [QueryParameter("max_danceability")]
            public double? MaxDanceability { get; set; }
            [QueryParameter("max_duration_ms")]
            public int? MaxDurationMs { get; set; }
            [QueryParameter("max_energy")]
            public double? MaxEnergy { get; set; }
            [QueryParameter("max_instrumentalness")]
            public double? MaxInstrumentalness { get; set; }
            [QueryParameter("max_key")]
            public int? MaxKey { get; set; }
            [QueryParameter("max_liveness")]
            public double? MaxLiveness { get; set; }
            [QueryParameter("max_loudness")]
            public double? MaxLoudness { get; set; }
            [QueryParameter("max_mode")]
            public int? MaxMode { get; set; }
            [QueryParameter("max_popularity")]
            public int? MaxPopularity { get; set; }
            [QueryParameter("max_speechiness")]
            public double? MaxSpeechiness { get; set; }
            [QueryParameter("max_tempo")]
            public double? MaxTempo { get; set; }
            [QueryParameter("max_time_signature")]
            public int? MaxTimeSignature { get; set; }
            [QueryParameter("max_valence")]
            public double? MaxValence { get; set; }
            [QueryParameter("min_acousticness")]
            public double? MinAcousticness { get; set; }
            [QueryParameter("min_danceability")]
            public double? MinDanceability { get; set; }
            [QueryParameter("min_duration_ms")]
            public int? MinDurationMs { get; set; }
            [QueryParameter("min_energy")]
            public double? MinEnergy { get; set; }
            [QueryParameter("min_instrumentalness")]
            public double? MinInstrumentalness { get; set; }
            [QueryParameter("min_key")]
            public int? MinKey { get; set; }
            [QueryParameter("min_liveness")]
            public double? MinLiveness { get; set; }
            [QueryParameter("min_loudness")]
            public double? MinLoudness { get; set; }
            [QueryParameter("min_mode")]
            public int? MinMode { get; set; }
            [QueryParameter("min_popularity")]
            public int? MinPopularity { get; set; }
            [QueryParameter("min_speechiness")]
            public double? MinSpeechiness { get; set; }
            [QueryParameter("min_tempo")]
            public double? MinTempo { get; set; }
            [QueryParameter("min_time_signature")]
            public int? MinTimeSignature { get; set; }
            [QueryParameter("min_valence")]
            public double? MinValence { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("seed_artists")]
            public string? SeedArtists { get; set; }
#nullable restore
#else
            [QueryParameter("seed_artists")]
            public string SeedArtists { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("seed_genres")]
            public string? SeedGenres { get; set; }
#nullable restore
#else
            [QueryParameter("seed_genres")]
            public string SeedGenres { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("seed_tracks")]
            public string? SeedTracks { get; set; }
#nullable restore
#else
            [QueryParameter("seed_tracks")]
            public string SeedTracks { get; set; }
#endif
            [QueryParameter("target_acousticness")]
            public double? TargetAcousticness { get; set; }
            [QueryParameter("target_danceability")]
            public double? TargetDanceability { get; set; }
            [QueryParameter("target_duration_ms")]
            public int? TargetDurationMs { get; set; }
            [QueryParameter("target_energy")]
            public double? TargetEnergy { get; set; }
            [QueryParameter("target_instrumentalness")]
            public double? TargetInstrumentalness { get; set; }
            [QueryParameter("target_key")]
            public int? TargetKey { get; set; }
            [QueryParameter("target_liveness")]
            public double? TargetLiveness { get; set; }
            [QueryParameter("target_loudness")]
            public double? TargetLoudness { get; set; }
            [QueryParameter("target_mode")]
            public int? TargetMode { get; set; }
            [QueryParameter("target_popularity")]
            public int? TargetPopularity { get; set; }
            [QueryParameter("target_speechiness")]
            public double? TargetSpeechiness { get; set; }
            [QueryParameter("target_tempo")]
            public double? TargetTempo { get; set; }
            [QueryParameter("target_time_signature")]
            public int? TargetTimeSignature { get; set; }
            [QueryParameter("target_valence")]
            public double? TargetValence { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class RecommendationsRequestBuilderGetRequestConfiguration : RequestConfiguration<RecommendationsRequestBuilderGetQueryParameters> 
        {
        }
    }
}
