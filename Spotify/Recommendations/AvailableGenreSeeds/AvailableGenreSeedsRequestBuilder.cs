// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Spotify.Models;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Spotify.Recommendations.AvailableGenreSeeds {
    /// <summary>
    /// Builds and executes requests for operations under \recommendations\available-genre-seeds
    /// </summary>
    public class AvailableGenreSeedsRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>
        /// Instantiates a new <see cref="AvailableGenreSeedsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AvailableGenreSeedsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/recommendations/available-genre-seeds", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="AvailableGenreSeedsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AvailableGenreSeedsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/recommendations/available-genre-seeds", rawUrl)
        {
        }
        /// <summary>
        /// Retrieve a list of available genres seed parameter values for [recommendations](/documentation/web-api/reference/#/operations/get-recommendations).
        /// </summary>
        /// <returns>A <see cref="AvailableGenreSeedsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="AvailableGenreSeeds401Error">When receiving a 401 status code</exception>
        /// <exception cref="AvailableGenreSeeds403Error">When receiving a 403 status code</exception>
        /// <exception cref="AvailableGenreSeeds429Error">When receiving a 429 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<AvailableGenreSeedsGetResponse?> GetAsAvailableGenreSeedsGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<AvailableGenreSeedsGetResponse> GetAsAvailableGenreSeedsGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"401", AvailableGenreSeeds401Error.CreateFromDiscriminatorValue},
                {"403", AvailableGenreSeeds403Error.CreateFromDiscriminatorValue},
                {"429", AvailableGenreSeeds429Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<AvailableGenreSeedsGetResponse>(requestInfo, AvailableGenreSeedsGetResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve a list of available genres seed parameter values for [recommendations](/documentation/web-api/reference/#/operations/get-recommendations).
        /// </summary>
        /// <returns>A <see cref="AvailableGenreSeedsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="AvailableGenreSeeds401Error">When receiving a 401 status code</exception>
        /// <exception cref="AvailableGenreSeeds403Error">When receiving a 403 status code</exception>
        /// <exception cref="AvailableGenreSeeds429Error">When receiving a 429 status code</exception>
        [Obsolete("This method is obsolete. Use GetAsAvailableGenreSeedsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<AvailableGenreSeedsResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<AvailableGenreSeedsResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"401", AvailableGenreSeeds401Error.CreateFromDiscriminatorValue},
                {"403", AvailableGenreSeeds403Error.CreateFromDiscriminatorValue},
                {"429", AvailableGenreSeeds429Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<AvailableGenreSeedsResponse>(requestInfo, AvailableGenreSeedsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve a list of available genres seed parameter values for [recommendations](/documentation/web-api/reference/#/operations/get-recommendations).
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="AvailableGenreSeedsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public AvailableGenreSeedsRequestBuilder WithUrl(string rawUrl)
        {
            return new AvailableGenreSeedsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class AvailableGenreSeedsRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters> 
        {
        }
    }
}
